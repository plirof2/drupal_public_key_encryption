<?php
/**
 * @file
 * Main module file for the Webform Encrypt module.
 */


// NOTE********* get private-public keys from SOURCE of html (or using <pre></pre>)
/**
 * Implementation of hook_permission().
 */
function webform_encrypt_permission() {
  return array(
    'view encrypted values' => array(
      'title' => t('View Encrypted Values in Webform Results'),
      'description' => t('Users that do not have this permission will see placeholder text.'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_admin_settings_alter(&$form, $form_state) {
  // Add our config options to the webform settings page.
  $form['encrypt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Encrypt'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['encrypt']['webform_encrypt_match_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email to user matching'),
    '#description' => t('If enabled, every time webform sends an email, it will attempt to find a user that matches the email address the mail will be sent to in order to correctly determine permissions.'),
    '#default_value' => variable_get('webform_encrypt_match_user', 0),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_component_edit_form_alter(&$form, $form_state) {
  // Add our fields to the component add/edit form.
  $component = $form_state['build_info']['args'][1];

  // Exclude webform component types that don't make sense to encrypt.
  $excluded_types = array('fieldset', 'file', 'markup', 'pagebreak');
  if (!in_array($form['type']['#value'], $excluded_types)) {

    // Add settings for encryption.
    $form['encryption'] = array(
      '#type' => 'fieldset',
      '#title' => t('Encryption'),
      '#tree' => TRUE,
    );
    $form['encryption']['encrypt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Encrypt this field\'s value'),
      '#description' => t('!link to edit encryption settings.', array('!link' => l('Click here', 'admin/config/system/encrypt'))),
      '#default_value' => isset($component['extra']['encrypt']) ? $component['extra']['encrypt'] : 0,
    );
  }
}

/**
 * Implementation of hook_webform_component_presave().
 * Save encryption settings for a component.
 */
function webform_encrypt_webform_component_presave(&$component) {
  if (!empty($component['encryption'])) {
    $component['extra'] = array_merge($component['extra'], $component['encryption']);
    unset($component['encryption']);
    
    if ($component['extra']['encrypt']) {
      webform_encrypt_encrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
    else {
      webform_encrypt_decrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 * Encrypt the value if the component has been marked as such.
 */
function webform_encrypt_webform_submission_presave($node, &$submission) {
  foreach ($submission->data as $cid => $entry) {
    if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
      foreach ($submission->data[$cid] as $delta => $value) {
        //$submission->data[$cid][$delta] = my_encrypt($entry[$delta], array('base64' => TRUE));
        $submission->data[$cid][$delta] = my_encrypt($entry[$delta], get_my_public_Key());
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_load().
 * Decrypt values if encrypted
 */
function webform_encrypt_webform_submission_load($submissions) {
  foreach ($submissions as $submission) {
    $node = node_load($submission->nid);
    foreach ($submission->data as $cid => $entry) {
      if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
        foreach ($submission->data[$cid] as $delta => $value) {
          if (!empty($entry[$delta]) && @unserialize($entry[$delta]) !== FALSE) {
            $submission->data[$cid][$delta] = user_access('view encrypted values') ? decrypt($entry[$delta], get_my_private_Key()) : t('[Value Encrypted]');
          }
        }
      }
    }
  }
}

/**
 * Preprocess for theme('webform_results_table').
 *
 * Decrypt webform values in the table display.
 */
function webform_encrypt_preprocess_webform_results_table(&$vars) {
  foreach ($vars['submissions'] as $sid => &$submission) {
    foreach ($submission->data as $cid => &$item) {
      $component = $vars['components'][$cid];
      if (!empty($component['extra']['encrypt'])) {
        foreach ($item['value'] as &$value) {
          //$value = user_access('view encrypted values') ? decrypt($value, array('base64' => TRUE)) : t('[Value Encrypted]');
          $value = user_access('view encrypted values') ? decrypt($value, get_my_private_Key()) : t('[Value Encrypted]');
        }
      }
    }
  }
}

/**
 * Encrypt all non-encrypted data of a component.
 */
function webform_encrypt_encrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    if (isset($components[$key]['encrypt']) && !$components[$key]['encrypt']) {
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => my_encrypt($row->data, array('base64' => TRUE)),
          //'data' => $row->data."AAA",  //ok
          'data' => my_encrypt($row->data, get_my_public_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}

/**
 * Decrypt all encrypted data of a component.
 */
function webform_encrypt_decrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    
    if (!empty($components[$key]['encrypt']) && is_array(@unserialize($row->data))) {
      //echo "<pre>";print_R(decrypt($row->data, array('base64' => TRUE)));exit;
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => decrypt($row->data, array('base64' => TRUE)),
          'data' => decrypt($row->data, get_my_private_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}


//--------------------------------------
// Encrypt data using the public key
function my_encrypt($data="aaa", $publicKey)
{
    // Encrypt the data using the public key
   openssl_public_encrypt($data, $encryptedData, $publicKey);
  //$encryptedData=ssl_encrypt($data,'public',get_my_public_Key());
//echo  "<HR>publicKey= $publicKey";
    // Return encrypted data
    return base64_encode($encryptedData);
}

// Decrypt data using the private key
function decrypt($data, $privateKey)
{
    // Decrypt the data using the private key
   openssl_private_decrypt($data, $decryptedData, $privateKey);
//   echo  "<HR>privateKey = $privateKey";

    // Return decrypted data
    return base64_decode($decryptedData);
}
/*
function ssl_encrypt($source,$type,$key){
//Assumes 1024 bit key and encrypts in chunks.

$maxlength=117;
$output='';
while($source){
  $input= substr($source,0,$maxlength);
  $source=substr($source,$maxlength);
  if($type=='private'){
    $ok= openssl_private_encrypt($input,$encrypted,$key);
  }else{
    $ok= openssl_public_encrypt($input,$encrypted,$key);
  }
        
  $output.=$encrypted;
}
return $output;
}

function ssl_decrypt($source,$type,$key){
// The raw PHP decryption functions appear to work
// on 128 Byte chunks. So this decrypts long text
// encrypted with ssl_encrypt().

$maxlength=128;
$output='';
while($source){
  $input= substr($source,0,$maxlength);
  $source=substr($source,$maxlength);
  if($type=='private'){
    $ok= openssl_private_decrypt($input,$out,$key);
  }else{
    $ok= openssl_public_decrypt($input,$out,$key);
  }
        
  $output.=$out;
}
return $output;

}
*/

function get_my_private_Key()
{
$private_my_key= trim('-----BEGIN PRIVATE KEY-----
MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAKQaKxYlHuvqqGvv
vUm0ZJ8AlZCfDcFvwQS5rFh5fYa+IZZP0cvBcf2fiQElmey+fbemYdatdNFI7VPq
NqshA/YYePr9GjGqBGZC4AVdJBMLxVWSkuriDJw7/eWySBGFiWOtbPQ5Z+xlNwu9
lnpp+nlP7gCFEzIqa3QPsKygfKg7AgMBAAECgYAP9xvKA8KGYUYRejmIOiyv63ah
o1fLQfwdYZMK6Ib13PmXjhxzHlbgveyuV+Ipzj6c52sNX8LFubqdN2QqMgQYfUjk
11q/oOLv5m6QzqhVoXWG7rpy/Vl4Def8Hs62seoMFJ5gRrPlHFkhYJsFk1YFE2HA
P3FJinDq1YIIVVR+wQJBANgiILqxumd56zpYg8VpTjWa4tEHtBoHyyCkPrRPpLRA
uqVqnfCBVF2C/ePirhQO8K7fmG0yqEd+5rCElTlu2mUCQQDCXx5YRDXo0mYZnWDw
+oQz1KvCc7J0AWNHrMNOepz5FVka3I9BWHfmXmJB6swUkjjqBE204m0mRz3GudRL
4P4fAkAK+bCvylas6oQHcnc+jxppnnPmKX371Gl8PtrwTRsQDDluLPvYOrkOBpjd
+aTdX+TY/IHBCdGBz+/nBtSNFhQBAkBJWdP9w2AEyMG3EOkwh5m0ZaGb9EV3+b4Z
olziFOuAJEpIFMwLAPPef+fcsFrruHK5/X3FsV03gNMTV7WCHRpJAkBZjvrOd7hZ
eXGhWe0Womy0u6wFVzUlOBOd/5+8vvr1KZleiLXY8SVn2/Cnftrz6D9krs0x96wd
6abCv9bCik3o
-----END PRIVATE KEY-----');

    return $private_my_key;
}

function get_my_public_Key()
{
$public_my_key=trim('-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkGisWJR7r6qhr771JtGSfAJWQ
nw3Bb8EEuaxYeX2GviGWT9HLwXH9n4kBJZnsvn23pmHWrXTRSO1T6jarIQP2GHj6
/RoxqgRmQuAFXSQTC8VVkpLq4gycO/3lskgRhYljrWz0OWfsZTcLvZZ6afp5T+4A
hRMyKmt0D7CsoHyoOwIDAQAB
-----END PUBLIC KEY-----'); 

    return $public_my_key;
}





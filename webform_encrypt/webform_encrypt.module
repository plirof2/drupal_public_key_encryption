<?php
/**
 * @file
 * Main module file for the Webform Encrypt module.
 */


// NOTE********* get private-public keys from SOURCE of html (or using <pre></pre>)
/**
 * Implementation of hook_permission().
 */
function webform_encrypt_permission() {
  return array(
    'view encrypted values' => array(
      'title' => t('View Encrypted Values in Webform Results'),
      'description' => t('Users that do not have this permission will see placeholder text.'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_admin_settings_alter(&$form, $form_state) {
  // Add our config options to the webform settings page.
  $form['encrypt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Encrypt'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['encrypt']['webform_encrypt_match_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email to user matching'),
    '#description' => t('If enabled, every time webform sends an email, it will attempt to find a user that matches the email address the mail will be sent to in order to correctly determine permissions.'),
    '#default_value' => variable_get('webform_encrypt_match_user', 0),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_component_edit_form_alter(&$form, $form_state) {
  // Add our fields to the component add/edit form.
  $component = $form_state['build_info']['args'][1];

  // Exclude webform component types that don't make sense to encrypt.
  $excluded_types = array('fieldset', 'file', 'markup', 'pagebreak');
  if (!in_array($form['type']['#value'], $excluded_types)) {

    // Add settings for encryption.
    $form['encryption'] = array(
      '#type' => 'fieldset',
      '#title' => t('Encryption'),
      '#tree' => TRUE,
    );
    $form['encryption']['encrypt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Encrypt this field\'s value'),
      '#description' => t('!link to edit encryption settings.', array('!link' => l('Click here', 'admin/config/system/encrypt'))),
      '#default_value' => isset($component['extra']['encrypt']) ? $component['extra']['encrypt'] : 0,
    );
  }
}

/**
 * Implementation of hook_webform_component_presave().
 * Save encryption settings for a component.
 */
function webform_encrypt_webform_component_presave(&$component) {
  if (!empty($component['encryption'])) {
    $component['extra'] = array_merge($component['extra'], $component['encryption']);
    unset($component['encryption']);
    
    if ($component['extra']['encrypt']) {
      webform_encrypt_encrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
    else {
      webform_encrypt_decrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 * Encrypt the value if the component has been marked as such.
 */
function webform_encrypt_webform_submission_presave($node, &$submission) {
  foreach ($submission->data as $cid => $entry) {
    if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
      foreach ($submission->data[$cid] as $delta => $value) {
        //$submission->data[$cid][$delta] = encrypt($entry[$delta], array('base64' => TRUE));
        $submission->data[$cid][$delta] = encrypt($entry[$delta], get_my_public_Key());
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_load().
 * Decrypt values if encrypted
 */
function webform_encrypt_webform_submission_load($submissions) {
  foreach ($submissions as $submission) {
    $node = node_load($submission->nid);
    foreach ($submission->data as $cid => $entry) {
      if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
        foreach ($submission->data[$cid] as $delta => $value) {
          if (!empty($entry[$delta]) && @unserialize($entry[$delta]) !== FALSE) {
            $submission->data[$cid][$delta] = user_access('view encrypted values') ? decrypt($entry[$delta], get_my_private_Key()) : t('[Value Encrypted]');
          }
        }
      }
    }
  }
}

/**
 * Preprocess for theme('webform_results_table').
 *
 * Decrypt webform values in the table display.
 */
function webform_encrypt_preprocess_webform_results_table(&$vars) {
  foreach ($vars['submissions'] as $sid => &$submission) {
    foreach ($submission->data as $cid => &$item) {
      $component = $vars['components'][$cid];
      if (!empty($component['extra']['encrypt'])) {
        foreach ($item['value'] as &$value) {
          //$value = user_access('view encrypted values') ? decrypt($value, array('base64' => TRUE)) : t('[Value Encrypted]');
          $value = user_access('view encrypted values') ? decrypt($value, get_my_private_Key()) : t('[Value Encrypted]');
        }
      }
    }
  }
}

/**
 * Encrypt all non-encrypted data of a component.
 */
function webform_encrypt_encrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    if (isset($components[$key]['encrypt']) && !$components[$key]['encrypt']) {
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => encrypt(base64_encode($row->data), array('base64' => TRUE)),
          'data' => encrypt(base64_encode($row->data), get_my_public_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}

/**
 * Decrypt all encrypted data of a component.
 */
function webform_encrypt_decrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    
    if (!empty($components[$key]['encrypt']) && is_array(@unserialize($row->data))) {
      //echo "<pre>";print_R(decrypt(base64_decode($row->data), array('base64' => TRUE)));exit;
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => decrypt(base64_decode($row->data), array('base64' => TRUE)),
          'data' => decrypt(base64_decode($row->data), get_my_private_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}


//--------------------------------------
// Encrypt data using the public key
function encrypt($data, $publicKey)
{
    // Encrypt the data using the public key
   openssl_public_encrypt($data, $encryptedData, $publicKey);
echo  "<HR>publicKey= $publicKey";
    // Return encrypted data
    return $encryptedData;
}

// Decrypt data using the private key
function decrypt($data, $privateKey)
{
    // Decrypt the data using the private key
   openssl_private_decrypt($data, $decryptedData, $privateKey);
   echo  "<HR>privateKey = $privateKey";

    // Return decrypted data
    return $decryptedData;
}

function get_my_private_Key()
{
$private_my_key= trim('-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDB9Hbv9wBltAgj
rOI0zZJOiGg2w/HespgjlHZgW3MkPtX2gA24EVhW/O+LIB6aQ/gCGFLcjRu7m7va
2etqnDuIoEdKVAVOGKToHJkdBVTrA4CaeOmfbovBkKhEX2Cd6HZ/IL6fDYaaFIFi
YOfTbXbgC6OL4O3kjUFDXcDvVgWdHULlAYjZNSGZy4d0T0uq1mjXDik1DDTq2Ubq
7yeCRbLsvwU28jCLClYf7ml/qroL4GKEXtwzkl+F3b9Fa/vTsb2HQKq6vP8v7ECj
UaWWuIimwvxyVdHb05V0SQHYhBfKNxbZ6sNJ0UC9UMADymsFzhdq3wEsMqnYp3xU
LubTnmsfAgMBAAECggEAd9Ez4I4wWqPbG17j50bPiWBPMPXfZ3ng7qn6bxBPkyaW
O09kKj/c2PAsc0AGZ7pxbanlFoa9iSpt5IcXHaciSAbrw4kgNdyXkySHmhv/F6f0
PHlRqcI65/sbWBGruCExgtuRpuROMMVWIJZI4J4Q/9twzyrHC5gPpzQ1yiTUFvg2
uaeIb9b/ktV637ux5LUg+XxniasJpeSbMFp0dO8/8Xn8wk6CUFd4y/w8jWzfFMXL
4FAQxsHU17UeYiGHGslfisrKTnhiUBUHtSne2p3keK7aVPZKaJyynDsbocmuJzAV
a86MX8PS0XwUgAn3fZt7ovJbiuGvZZfVY3vSdm9rUQKBgQDuVP4VtEGdIfjZFhEX
wn3QYpOrhAD+XnaBWcA64p01hKtCsQdR2qVapLj89mdgWYvSEwdVxJqyVQZlTWxZ
qfQZuGsiRny19HT2Jg8hmSwxmdN0ijC45o2ZKsC2EmjhJQTlxaGe/PR2PEGv5WEV
N/H31hPI+270vebmIL92JLM7zQKBgQDQVUt7mJfPUqYRELEl1GV1eKfcDuOCBBG6
JDMHfQWMfTJwO0IQASFN9tU1CJPXVx6MLiO7QIa4zZSNiFtwKEvLnhsLBQjnGzjR
wN6vajaqs9VynI3DPEaPO17Kouc5he7LpMH9OJbQqtL0eR7qFdL1pKo/U+0cHRJJ
3zP2+SQOmwKBgFPZYR8fsOnodtVhVxgl2//BfrScF4FmmIi/m8rbyXV3vI0VHT8m
DoDKbS7KPep+9pstCKqbJdXR5hMj3xfYnEGkSUTgyaV2YOPs1ev7KLo2pVdd+vBC
ZNTbXrtv1KhJTuTL2CXIVvV2E6IfsD031pBcJ8/Q7eN7IE4cfV/CX7CNAoGBAMpD
xYE96UX0LB8tYZAk4kxm1DImkmPMp5ldQ93lV9nKQ4oLPlxjfH5BQ0a2CTNs9c+L
jE1knGgX0D6JQJ1nwg7ydbcBMF+QYl3jL1CHgoPBDV60+D2w66BsN9/swSlsCyfT
0jOTGXmGIEISxhznC2ZKdK//P5mn7/WgqscBpCw5AoGBALnrSk0XJM1r/hhY86hv
9woJl515vNGbWM4uK51DmywTLzCchEox9evwOQNhJYCpeMfoAOTLfgjgQX0dtOcJ
wm5PSBzY4F39bT5924IAwjxL7kLVxMzzFwM8rC7b4ZTYIqsycmSB68D4OHjqt6Hg
fQ0wZjb5vjQbJ2x0LpH2Fn/u
-----END PRIVATE KEY-----');

    return $private_my_key;
}

function get_my_public_Key()
{
$public_my_key=trim('-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwfR27/cAZbQII6ziNM2S
TohoNsPx3rKYI5R2YFtzJD7V9oANuBFYVvzviyAemkP4AhhS3I0bu5u72tnrapw7
iKBHSlQFThik6ByZHQVU6wOAmnjpn26LwZCoRF9gneh2fyC+nw2GmhSBYmDn0212
4Auji+Dt5I1BQ13A71YFnR1C5QGI2TUhmcuHdE9LqtZo1w4pNQw06tlG6u8ngkWy
7L8FNvIwiwpWH+5pf6q6C+BihF7cM5Jfhd2/RWv707G9h0Cqurz/L+xAo1GllriI
psL8clXR29OVdEkB2IQXyjcW2erDSdFAvVDAA8prBc4Xat8BLDKp2Kd8VC7m055r
HwIDAQAB
-----END PUBLIC KEY-----');

    return $public_my_key;
}





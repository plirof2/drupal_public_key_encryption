<?php
/**
 * @file
 * Main module file for the Webform Encrypt module.
 */


// NOTE********* get private-public keys from SOURCE of html (or using <pre></pre>)
/**
 * Implementation of hook_permission().
 */
function webform_encrypt_permission() {
  return array(
    'view encrypted values' => array(
      'title' => t('View Encrypted Values in Webform Results'),
      'description' => t('Users that do not have this permission will see placeholder text.'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_admin_settings_alter(&$form, $form_state) {
  // Add our config options to the webform settings page.
  $form['encrypt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Encrypt'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['encrypt']['webform_encrypt_match_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email to user matching'),
    '#description' => t('If enabled, every time webform sends an email, it will attempt to find a user that matches the email address the mail will be sent to in order to correctly determine permissions.'),
    '#default_value' => variable_get('webform_encrypt_match_user', 0),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_encrypt_form_webform_component_edit_form_alter(&$form, $form_state) {
  // Add our fields to the component add/edit form.
  $component = $form_state['build_info']['args'][1];

  // Exclude webform component types that don't make sense to encrypt.
  $excluded_types = array('fieldset', 'file', 'markup', 'pagebreak');
  if (!in_array($form['type']['#value'], $excluded_types)) {

    // Add settings for encryption.
    $form['encryption'] = array(
      '#type' => 'fieldset',
      '#title' => t('Encryption'),
      '#tree' => TRUE,
    );
    $form['encryption']['encrypt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Encrypt this field\'s value'),
      '#description' => t('!link to edit encryption settings.', array('!link' => l('Click here', 'admin/config/system/encrypt'))),
      '#default_value' => isset($component['extra']['encrypt']) ? $component['extra']['encrypt'] : 0,
    );
  }
}

/**
 * Implementation of hook_webform_component_presave().
 * Save encryption settings for a component.
 */
function webform_encrypt_webform_component_presave(&$component) {
  if (!empty($component['encryption'])) {
    $component['extra'] = array_merge($component['extra'], $component['encryption']);
    unset($component['encryption']);
    
    if ($component['extra']['encrypt']) {
      webform_encrypt_encrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
    else {
      webform_encrypt_decrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 * Encrypt the value if the component has been marked as such.
 */
function webform_encrypt_webform_submission_presave($node, &$submission) {
  foreach ($submission->data as $cid => $entry) {
    if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
      foreach ($submission->data[$cid] as $delta => $value) {
        //$submission->data[$cid][$delta] = encrypt($entry[$delta], array('base64' => TRUE));
        $submission->data[$cid][$delta] = encrypt($entry[$delta], get_my_public_Key());
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_load().
 * Decrypt values if encrypted
 */
function webform_encrypt_webform_submission_load($submissions) {
  foreach ($submissions as $submission) {
    $node = node_load($submission->nid);
    foreach ($submission->data as $cid => $entry) {
      if (!empty($node->webform['components'][$cid]['extra']['encrypt'])) {
        foreach ($submission->data[$cid] as $delta => $value) {
          if (!empty($entry[$delta]) && @unserialize($entry[$delta]) !== FALSE) {
            $submission->data[$cid][$delta] = user_access('view encrypted values') ? decrypt($entry[$delta], get_my_private_Key()) : t('[Value Encrypted]');
          }
        }
      }
    }
  }
}

/**
 * Preprocess for theme('webform_results_table').
 *
 * Decrypt webform values in the table display.
 */
function webform_encrypt_preprocess_webform_results_table(&$vars) {
  foreach ($vars['submissions'] as $sid => &$submission) {
    foreach ($submission->data as $cid => &$item) {
      $component = $vars['components'][$cid];
      if (!empty($component['extra']['encrypt'])) {
        foreach ($item['value'] as &$value) {
          //$value = user_access('view encrypted values') ? decrypt($value, array('base64' => TRUE)) : t('[Value Encrypted]');
          $value = user_access('view encrypted values') ? decrypt($value, get_my_private_Key()) : t('[Value Encrypted]');
        }
      }
    }
  }
}

/**
 * Encrypt all non-encrypted data of a component.
 */
function webform_encrypt_encrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    if (isset($components[$key]['encrypt']) && !$components[$key]['encrypt']) {
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => encrypt($row->data, array('base64' => TRUE)),
          'data' => encrypt($row->data, get_my_public_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}

/**
 * Decrypt all encrypted data of a component.
 */
function webform_encrypt_decrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    
    if (!empty($components[$key]['encrypt']) && is_array(@unserialize($row->data))) {
      //echo "<pre>";print_R(decrypt($row->data, array('base64' => TRUE)));exit;
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => decrypt($row->data, array('base64' => TRUE)),
          'data' => decrypt($row->data, get_my_private_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}


//--------------------------------------
// Encrypt data using the public key
function encrypt($data, $publicKey)
{
    // Encrypt the data using the public key
   openssl_public_encrypt($data, $encryptedData, $publicKey);
echo  "<HR>publicKey= $publicKey";
    // Return encrypted data
    return $encryptedData;
}

// Decrypt data using the private key
function decrypt($data, $privateKey)
{
    // Decrypt the data using the private key
   openssl_private_decrypt($data, $decryptedData, $privateKey);
   echo  "<HR>privateKey = $privateKey";

    // Return decrypted data
    return $decryptedData;
}

function get_my_private_Key()
{
$private_my_key= trim('-----BEGIN PRIVATE KEY-----
MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQC75Yn63fGn9XmL
hzEjQvFOKyvyk8NH3UvBWCoWkchGN16R6GLJ3mctVG8ULF7DGmSuvvJG/bOgr70B
z/C6gk56k5mGm0rt+PfjfHrm8ClkKdOK8Pj3zZ5HaPIeHuuboPjxPLojL5bYF5eM
jRi0qWaBuiUf/ZWjd4nqHCmXlpz2/WKxF2b/30uKJNNOv40bGe8t8T1M3nUwJAhL
SuFvHdzjMc3hCM4bzL3mphwMMFCKrXtNt/fYwI7L948w52lCskZnUKX8uYu3Jl5Z
jxiJlE8WZ/fSv2fqiQXSyrLE6+/YjrQRDKqkcIJKvYOBH7E7tT0LLRzLB8+PhFCO
NdqGxaYZ2sxE15ygJGavC4ZbBeQkOndvybNbQLcKKi6G983DD3LR6dA72EJpMXAx
rfqUdtz9wYKg06xGsG3VnKvvqBJ1dbPrjlilD1/FDAjEBQirGlBTy7J6ELH1EIc5
CglDoNer78Wyp2lg4FOFVfer37Q342iEBfq+kRL73BcHOQdabwsgtCMLJ5bfc2tS
ImHAzsgdbApSXAZ6iycTXsWyrTPtD9JUnSp81XotMNOCt+F95aaTnC0Q7E7XLLk0
Gu+FvTNn9gaVc9xwQVbVsUKhwCWqL1oM1kjtyBSrJE3NVZwFfH2n8ZO0WDkyVluR
iU64+v6oe4xFP5g9LwYVELtjoazmfwIDAQABAoICAGYe7C4noGab2PKHiKJUiNfm
SN1vh8wwLzMnGsDnfMUE5OZCOibjNIqDgFejgeFiH+SFrSH+Uzl7Kiuo+3oyxjqC
rAdnsYLDNN8z0YxgbO6eePXj4Dy2SVcgZ68NORp9k69xRO1IuSA7OkfOi+Xsx+Sr
6e+IIGMW3iMaKVTVK/xlXNVJFdbtYp3zQ9Fh9GwNXVxH5/w2T9TZUJSzXvDIdzwX
3oB3C6Y6Ud/g2g+Z1rx4azKjURZCGZors2xt6VyxjegrAfvoUFI7jT35sulbbNyN
pziohO8Ih9y4BA9Y+CNn89/sVXZIG9hJRgbQ1b/Q0huX6jVCyoGC9VFFXb6v/4TR
H1K4qb6urZGRmZ03ZsO9YypCwtwB4OUwCjIiEML+U1khdbu7ZUIF/WOCT005uU9d
MgFQbyRlN4x0j3xTmgf0o8ndL5NCo7gvrVuCTKRTLpBJqdIcHpVjJRyPCsxwehsp
+s13ttjqg+5E2d6ePsr4rcMGjKOmfoIypDyPoX25M/D1N9Ec7Rdbb5slEUJxeMn3
l4PFyCVtcBs4w4b9V+x9E7IhVqwlatqeV2Q7nc+7mzlisQnJfDeuoNpRUva1yUn/
5nkUYkU9pbiJDLMdA+1lFR/ivRNFkHAM+sShE8Y+cUCv6v25cH/4XKH/kOzo5Hek
O23/5LKQbB4yuaTpY9p5AoIBAQDmbzdmUriwpJrf4QA6NbXVZhl323+y0DWOu7xh
pHVNRBx7lM3A/3ChroMYkN+B+CbRZk/HLTuNZyO9z5WwhrR4VTbbZ1FCuHjnqzRx
XFblfuBSFHlsWeKE9P7LUJDIItmDTVK1IWOLsfUzGfZYy+L4R3HhA/0mIPjT96fs
3AmVRn7m88TGwsrSUXzp4eAMNQci2/j5XWCaSlqz2dtAyBygWyFoJDstzdu1doD0
nDQm2NSoWMa4DB8Ps2AU2pTCUDSeDsPBlnZ1QFzHm5QOcgv8q817yptrLiL5qyx+
m/HA2ZK/LTEzZsZTZjfFLKsx/LL0SDc5eH+bM1+Ngdk63kEVAoIBAQDQviqv75oZ
y2CRpvVvTgOmV6MxuuNGdGVUIm4oWWg2wYhA3h/vxKVpTV5KaoW46b9wfhKpNZd/
8T5SUOKWXZRWkmKdTIeGI+jxGkXurRQ/uM9gN4ldMXWUSSD+z4AETpgbOgQBHP+g
vLmUOnahlVjW2yf6DxF9NsnDY3KeHBzGSxL9vir/N8sddfuRDpcM4Y+H4OXFNjD2
4Zbq6RVZYgieGD3YCcZSiKmWi43ZE4OtmudlMlv+7ocE1YYKqHNfHq7jyohqvnqI
1Jm8+bKZR4Fpy51P+phY1axuFpTwYevFTdt5tsJ5YKGxjVeqguPzL7zRCNSurDBk
RmdaashXJeZDAoIBAGkJTvZcRIV4MoRUOldOPjkslfVVX0rxr0gFeSQE49c5ccY/
GN6dUQjR1D3xY4AJzh/rA/hlPN0Co38UzUWu0Tp8lUnDOX4xOiNXncsCbTWk9LlV
Tde+zQsP5chlS+l+QSmhqE6aDpcRohQOBIWLQkUrw9Pujoi/xMxR+gB0eAXMIXJC
sXJsPilKLacqZ4cI8NzJ6h44mx0ZQWjzqAZKcQoDICIpSbRiPoDjqHpXbUo70gt+
k+420D3G5Mf8row4JRPa5Q4r+IkPsnrmBsHi6GXfJgYEX32mhRjLFrgLe1INmt97
yQ6GDWbclBVTfCGH70Z8WHfg3kGvVCHbi1pTDtUCggEAZEiH/4APu4aufSsFzJRh
Qn/l4hVT7NwsdhAYdgAGBhBSIj/Uff8uLHnD6+JjHeQGWcfntS0O/KNsemVrhiut
AS5QfBtxHGuSFIq3wCOcj8R8tE/aCVCimTvMwz3y1Z7gimwD0nkZAiLI0UKJDbXP
OWGOQh8NGufAZMMZJIaC+GzG0eqTg4tNZHjzA8xLmx+eMfxExsrzGRhlxbN20zs6
wqEIzQpdIfeP6chfvEMYxsWdl0trUP1NFnBydhpZWwBFqx/5C7c47RWeSmB3ghYN
QUNV7z+IA12b+kOVCCsy9tYhs8auhVt8Mu2hiURauNFdV9tzOft1QCdmrdSRLPUD
OwKCAQAYjb+EuSZfzrYb5bSYSzAHH6KWSY3fR3IGjISwHlfztRy15r1eXo9hYTIk
9TinV/zfoG4BYjSxteUVnuCWB9/4CJojqp6jPAPO8vO2LH+Qy6XsxsjY9DAymJ5Y
JQKcaqt/mT8aWpsKvhfo/zxbd328w2WVZ3C7OdnSvcUX54mNK8oo2bjraDtl1/2b
t4skcnqUkJG0foa0Dd0LRavTk/jmg19Cr/kmBGmgYR8WShkzV/PjkQNM01XMJd0O
8halQHRB8DqrS7wbefvr2er9l+jZb751khXCKswCjWpYTGYdCPnnQOIFLQ6HXXWZ
fCBKkQpsYFe+5nClt7GbG+AX6W60
-----END PRIVATE KEY-----');

    return $private_my_key;
}

function get_my_public_Key()
{
$public_my_key=trim('-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAu+WJ+t3xp/V5i4cxI0Lx
Tisr8pPDR91LwVgqFpHIRjdekehiyd5nLVRvFCxewxpkrr7yRv2zoK+9Ac/wuoJO
epOZhptK7fj343x65vApZCnTivD4982eR2jyHh7rm6D48Ty6Iy+W2BeXjI0YtKlm
gbolH/2Vo3eJ6hwpl5ac9v1isRdm/99LiiTTTr+NGxnvLfE9TN51MCQIS0rhbx3c
4zHN4QjOG8y95qYcDDBQiq17Tbf32MCOy/ePMOdpQrJGZ1Cl/LmLtyZeWY8YiZRP
Fmf30r9n6okF0sqyxOvv2I60EQyqpHCCSr2DgR+xO7U9Cy0cywfPj4RQjjXahsWm
GdrMRNecoCRmrwuGWwXkJDp3b8mzW0C3CiouhvfNww9y0enQO9hCaTFwMa36lHbc
/cGCoNOsRrBt1Zyr76gSdXWz645YpQ9fxQwIxAUIqxpQU8uyehCx9RCHOQoJQ6DX
q+/FsqdpYOBThVX3q9+0N+NohAX6vpES+9wXBzkHWm8LILQjCyeW33NrUiJhwM7I
HWwKUlwGeosnE17Fsq0z7Q/SVJ0qfNV6LTDTgrfhfeWmk5wtEOxO1yy5NBrvhb0z
Z/YGlXPccEFW1bFCocAlqi9aDNZI7cgUqyRNzVWcBXx9p/GTtFg5MlZbkYlOuPr+
qHuMRT+YPS8GFRC7Y6Gs5n8CAwEAAQ==
-----END PUBLIC KEY-----');

    return $public_my_key;
}





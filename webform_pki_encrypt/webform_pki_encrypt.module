<?php
/**
 * @file
 * Main module file for the Webform Encrypt module.
 */


// NOTE********* get private-public keys from SOURCE of html (or using <pre></pre>)
/**
 * Implementation of hook_permission().
 */
function webform_pki_encrypt_permission() {
  return array(
    'view encrypted values' => array(
      'title' => t('View Encrypted Values in Webform Results'),
      'description' => t('Users that do not have this permission will see placeholder text.'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_pki_encrypt_form_webform_admin_settings_alter(&$form, $form_state) {
  // Add our config options to the webform settings page.
  $form['pki_encrypt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Encrypt'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['pki_encrypt']['webform_pki_encrypt_match_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email to user matching'),
    '#description' => t('If enabled, every time webform sends an email, it will attempt to find a user that matches the email address the mail will be sent to in order to correctly determine permissions.'),
    '#default_value' => variable_get('webform_pki_encrypt_match_user', 0),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_pki_encrypt_form_webform_component_edit_form_alter(&$form, $form_state) {
  // Add our fields to the component add/edit form.
  $component = $form_state['build_info']['args'][1];

  // Exclude webform component types that don't make sense to encrypt.
  $excluded_types = array('fieldset', 'file', 'markup', 'pagebreak');
  if (!in_array($form['type']['#value'], $excluded_types)) {

    // Add settings for encryption.
    $form['pki_encryption'] = array(
      '#type' => 'fieldset',
      '#title' => t('E ncryption'),
      '#tree' => TRUE,
    );
    $form['pki_encryption']['pki_encrypt'] = array(
      '#type' => 'checkbox',
      '#title' => t('Encrypt this field\'s value'),
      '#description' => t('!link to edit encryption settings.', array('!link' => l('Click here', 'admin/config/system/encrypt'))),
      '#default_value' => isset($component['extra']['pki_encrypt']) ? $component['extra']['pki_encrypt'] : 0,
    );
  }
}

/**
 * Implementation of hook_webform_component_presave().
 * Save encryption settings for a component.
 */
function webform_pki_encrypt_webform_component_presave(&$component) {
  if (!empty($component['pki_encryption'])) {
    $component['extra'] = array_merge($component['extra'], $component['pki_encryption']);
    unset($component['pki_encryption']);
    if ($component['extra']['pki_encrypt']) {
      webform_pki_encrypt_encrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
    else {
      webform_pki_encrypt_decrypt_component_data($component['nid'], $component['cid'], $component['extra']);
    }
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 * Encrypt the value if the component has been marked as such.
 */
function webform_pki_encrypt_webform_submission_presave($node, &$submission) {
  foreach ($submission->data as $cid => $entry) {
    if (!empty($node->webform['components'][$cid]['extra']['pki_encrypt'])) {
      foreach ($submission->data[$cid] as $delta => $value) {
        //$submission->data[$cid][$delta] = my_encrypt($entry[$delta], array('base64' => TRUE));
        $submission->data[$cid][$delta] = my_encrypt($entry[$delta], get_my_public_Key());
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_load().
 * Decrypt values if encrypted
 */
function webform_pki_encrypt_webform_submission_load($submissions) {
  $has_result_access=false;
  if(_mySite_session("temp_decryptor")=="yes") $has_result_access=true;
  foreach ($submissions as $submission) {
    drupal_set_message("webform_pki_encrypt_webform_submission_load ");
    $node = node_load($submission->nid);
    watchdog("webform_pki_encrypt_webform_submission_load", "nodeid= ".$node->nid." subm nodeid=".$submission->nid. ' SUBMID='.$submission->sid, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);

    if (_mySite_session("temp_decryptor")!="yes" ) 
      { drupal_set_message("webform_pki_encrypt_webform_submission_load temp_decryptor YES temp_decryptorSESSION=". _mySite_session("temp_decryptor")." has_result_access=$has_result_access");
        $has_result_access=false;
        //$has_result_access=_webform_pki_encrypt_my_access_call_back($node);
      } 
    else 
      { drupal_set_message("webform_pki_encrypt_webform_submission_load temp_decryptor NO temp_decryptorSESSION=". _mySite_session("temp_decryptor")." has_result_access=$has_result_access");
        
        $has_result_access=_webform_pki_encrypt_my_access_call_back($node);
      };

    foreach ($submission->data as $cid => $entry) {
      if (!empty($node->webform['components'][$cid]['extra']['pki_encrypt'])) {
        foreach ($submission->data[$cid] as $delta => $value) {
          ///if (!empty($entry[$delta]) && @unserialize($entry[$delta] ) !== FALSE) {  //ORIGINAL Line - don't know if its ok
          if (!empty($entry[$delta]) /* && @unserialize($entry[$delta] ) !== FALSE */) {
            $submission->data[$cid][$delta] = (user_access('view encrypted values') || $has_result_access  )? /*"DECRYPTED-".*/decrypt($entry[$delta], get_my_private_Key()) : t('[Value EncryptedAAAAAA]');
          }
        }
      }
    }
  }
}

/**
 * Preprocess for theme('webform_results_table').
 *
 * Decrypt webform values in the table display.
 */
function webform_pki_encrypt_preprocess_webform_results_table(&$vars) {
  foreach ($vars['submissions'] as $sid => &$submission) {
    foreach ($submission->data as $cid => &$item) {
      drupal_set_message("webform_pki_encrypt_preprocess_webform_results_table");
      //$has_result_access=false;
      //$has_result_access=_webform_pki_encrypt_my_access_call_back($submission->nid);  
      $component = $vars['components'][$cid];
      if (!empty($component['extra']['pki_encrypt'])) {
        foreach ($item['value'] as &$value) {
          //$value = user_access('view encrypted values') ? decrypt($value, array('base64' => TRUE)) : t('[Value Encrypted]');
          $value = (user_access('view encrypted values') || $has_result_access  ) ? decrypt($value, get_my_private_Key()) : t('[Value EncryptedBBBBB]');
        }
      }
    }
  }
}

/**
 * Encrypt all non-encrypted data of a component.
 */
function webform_pki_encrypt_encrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    if (isset($components[$key]['pki_encrypt']) && !$components[$key]['pki_encrypt']) {
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => my_encrypt($row->data, array('base64' => TRUE)),
          'data' => my_encrypt($row->data, get_my_public_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}

/**
 * Decrypt all encrypted data of a component.
 */
function webform_pki_encrypt_decrypt_component_data($nid = NULL, $cid = NULL, $extra = array()) {
  $results = db_query('SELECT nid, cid, extra FROM {webform_component} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  
  foreach ($results as $row) {
    $components[$row->nid . ':' . $row->cid] = unserialize($row->extra);
  }
  $data = db_query('SELECT nid, sid, cid, data FROM {webform_submitted_data} where nid = :nid AND cid = :cid', array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  foreach ($data as $row) {
    $key = $row->nid . ':' . $row->cid;
    
    if (!empty($components[$key]['pki_encrypt']) && is_array(@unserialize($row->data))) {
      //echo "<pre>";print_R(decrypt($row->data, array('base64' => TRUE)));exit;
      db_update('webform_submitted_data')
        ->fields(array(
          //'data' => decrypt($row->data, array('base64' => TRUE)),
          'data' => decrypt($row->data, get_my_private_Key()),
        ))
        ->condition('nid', $row->nid)
        ->condition('sid', $row->sid)
        ->condition('cid', $row->cid)
        ->execute();
    }
  }
}


//--------------------------------------
// Encrypt data using the public key
function my_encrypt($data="aaa", $publicKey)
{
    // Encrypt the data using the public key
    openssl_public_encrypt($data, $encryptedData, $publicKey);
    // Return encrypted data
    return base64_encode($encryptedData);
}

// Decrypt data using the private key
function decrypt($data, $privateKey)
{
    // Decrypt the data using the private key
    openssl_private_decrypt(base64_decode($data), $decryptedData, $privateKey);
    // Return decrypted data
    return ($decryptedData);
}
/*
function ssl_encrypt($source,$type,$key){
//Assumes 1024 bit key and encrypts in chunks.

$maxlength=117;
$output='';
while($source){
  $input= substr($source,0,$maxlength);
  $source=substr($source,$maxlength);
  if($type=='private'){
    $ok= openssl_private_encrypt($input,$encrypted,$key);
  }else{
    $ok= openssl_public_encrypt($input,$encrypted,$key);
  }
        
  $output.=$encrypted;
}
return $output;
}

function ssl_decrypt($source,$type,$key){
// The raw PHP decryption functions appear to work
// on 128 Byte chunks. So this decrypts long text
// encrypted with ssl_encrypt().

$maxlength=128;
$output='';
while($source){
  $input= substr($source,0,$maxlength);
  $source=substr($source,$maxlength);
  if($type=='private'){
    $ok= openssl_private_decrypt($input,$out,$key);
  }else{
    $ok= openssl_public_decrypt($input,$out,$key);
  }
        
  $output.=$out;
}
return $output;

}
*/

function get_my_private_Key()
{
$private_my_key= trim('-----BEGIN PRIVATE KEY-----
MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJka97mFuKzAd9qY
s5nKdoNW/dkyQCFcGFFtZ7ZsXvTUOe678Bh91Ca5zeYin+vpsYRbzci/CYvxbYui
VJVjn+URmnY2/I1FzQg0NDkGFD27lgBAFB1euLf+hN6mhVBdj4y9V2cpHV9IiWAg
5WZeF2d/nwuyMI/nv1mdmvfNmyofAgMBAAECgYARMk86vkNE3AVaPyaFEpGHJQE0
IQnE9XQhyTkJ61grBZ9QKjnIdnGau+ndfGwb8k6nACy37IUk+8QDGAOKF/uAcaR5
9pXArxlJo73EC9yadFyAc/DMf/y2vEFFC4ZrXoZhx+CG1qvqjSK4hccg2VZdlq0U
ktXprIFXCwgxQkFMSQJBAMihyvPbAWzP8+uSdMcCBlzrkhIuokYhRZDoyYtsNq/Y
Dsyg1N+4F0MGHcwikYhc68oZuHXe4A1bRkGDriAfk1MCQQDDW4V9xsRDM4QGKEKS
lcUgK+FQP4pNKxa4T/peaXDeYTKIZ1KRFNUULfX57vFWJ9y857zkzQ+m0JksDfUM
KeCFAkBlvCT9ooAGfSxit9EfWJeBZrKbJaqDhTuRT3ljiWvxns1iVeubxe2FvwQ9
Dwpc60FlKcWvf2R9YVsuvWb+QwShAkBosPZD5i4tWUEqT48FoS+Hwxw29iY2np3J
XkrtJ5JuCiabhMtxpnleHBdSvmMk6a3YqlPHRcFagzVir4Qf5Z1FAkEAjqJyHb8V
rZu2uj1+r/vGv9BbH80xjReT8udGjewBxBtqCfFoMuE8Xh6EImOXdZSHBXF2Srzq
bb12MrEizy/XNQ==
-----END PRIVATE KEY-----');
    $settings = _webform_pki_encrypt_webform_pki_encrypt_settings(get_current_node_id());
    if (!empty($settings)) {
      //$public_my_key = $settings['public_key'] ;
      $private_my_key = $settings['private_key'];
    }
    $session_private_key=_mySite_session("current_private_key");
    //drupal_set_message("SESS PRIV="._mySite_session("current_private_key"));
    //drupal_set_message(  "<h1>nid=".get_current_node_id()."private_my_key=$private_my_key </h1>");
    if($session_private_key!=null) $private_my_key=$session_private_key;

    return $private_my_key;
}

function get_my_public_Key()
{
$public_my_key=trim('-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZGve5hbiswHfamLOZynaDVv3Z
MkAhXBhRbWe2bF701Dnuu/AYfdQmuc3mIp/r6bGEW83IvwmL8W2LolSVY5/lEZp2
NvyNRc0INDQ5BhQ9u5YAQBQdXri3/oTepoVQXY+MvVdnKR1fSIlgIOVmXhdnf58L
sjCP579ZnZr3zZsqHwIDAQAB
-----END PUBLIC KEY-----'); //sample default value

    $settings = _webform_pki_encrypt_webform_pki_encrypt_settings(get_current_node_id());
    if (!empty($settings)) {
      $public_my_key = $settings['public_key'] ;
      //$my_private_key = $settings['private_key'];
    }
    //drupal_set_message(  "<h1>public_my_key=$public_my_key</h1>");

    return $public_my_key;
}


function get_current_node_id(){
  /*
  if (isset($node->nid) && count($node->nid) > 0){
    $mynodeid = $node->nid;
   drupal_set_message(  "<h1>mynodeid=$mynodeid</h1>");
  }
  */
  if ($node = menu_get_object()) { // this doesn't work in all nodes...
  // Get the nid
  $nid = $node->nid;
  /*
  drupal_set_message(  "<h1>nid=$nid</h1>");
  $_SESSION[date("hh:ss")]="aaa";
  $a=serialize($_SESSION);
  drupal_set_message(  "SESS = $a");
  */
  return $nid;
}


}

// +++++++++++++++++++ ADD FIELDS +++++++++++++++++++++++++++++++




/**
 * Implements hook_form_FORM_ID_alter() for webform_configure_form().
 */
function webform_pki_encrypt_form_webform_configure_form_alter(&$form, &$form_state) {
  if (user_access('view encrypted values')) {
    $settings = _webform_pki_encrypt_webform_pki_encrypt_settings($form['nid']['#value']);

    $form['#validate'][] = 'webform_pki_encrypt_form_webform_configure_form_validate';
    $form['#submit'][] = 'webform_pki_encrypt_form_webform_configure_form_submit';
    $form['#attached']['css'][] = drupal_get_path('module', 'webform_pki_encrypt') . '/webform_pki_encrypt.admin.css';


    if (!empty($settings)) {
      $my_public_key = $settings['public_key'] ;
      $my_private_key = $settings['private_key'];
    }


    $form['pk_encrypter'] = array(
      '#type' => 'fieldset',
      '#title' => t('pk_encrypter'),
      '#description' => t('Specify dates and times to schedule when users are allowed to use this webform.<br />If the webform\'s overall status is set to %Closed under Submission settings, it will remain closed regardless of Scheduler settings.', array(
        '%Closed' => t('Closed'),
      )),
      '#weight' => -2.5,
      '#collapsible' => TRUE,
      '#collapsed' => !isset($my_public_key) && !isset($my_private_key),
      '#tree' => TRUE,
    );


    $form['pk_encrypter']['generate_pki_keys'] = array(
      '#type' => 'submit',
      '#title' => t('Generate Public & Private Key'),
      '#description' => t('Generate Public & Private Key'),
      ///'#default_value' => isset($my_public_key) ? $my_public_key : NULL,//ORIG
      '#default_value' => "generate_new keys",
      '#submit' => array('generate_new_keys'),
    );






    $form['pk_encrypter']['public_key_start'] = array(
      '#type' => 'textarea',
      '#title' => t('Public Key'),
      '#description' => t('PUBLIC KEY - saved to server'),
      ///'#default_value' => isset($my_public_key) ? $my_public_key : NULL,//ORIG
      '#default_value' => isset($my_public_key) ? $my_public_key : NULL,
    );

    $form['pk_encrypter']['private_key_end'] = array(
      '#type' => 'textarea',
      '#title' => t('Private Key'),
      '#description' => t('PRIVATE KEY - stored by USER'),
      ///'#default_value' => isset($my_private_key) ? $my_private_key : NULL,//ORIG
      '#default_value' => isset($my_private_key) ? $my_private_key : NULL,
    );

    $form['pk_encrypter']['msg_before'] = array(
      '#type' => 'textfield',
      '#title' => t('Message to display before start date'),
      '#description' => t('Message to display before start date. Leave empty to use default message'),
      '#maxlength' => 128,
      '#default_value' => isset($settings['msg_before']) ? $settings['msg_before'] : '',
    );

    $form['pk_encrypter']['msg_after'] = array(
      '#type' => 'textfield',
      '#title' => t('Message to display after private_key date'),
      '#description' => t('Message to display after private_key date. Leave empty to use default message'),
      '#maxlength' => 128,
      '#default_value' => isset($settings['msg_after']) ? $settings['msg_after'] : '',
    );

    }
  }


/**
 * Fetch the scheduler settings and information of webform(s) by the node ID.
 *
 * @param int $nid
 *   The node ID to which the webform belongs.
 *
 * @return array
 *   A row of information represented as an associative array.
 */
function _webform_pki_encrypt_webform_pki_encrypt_settings($nid) {
  $db_settings = db_select('webform_pki_encrypt', 'w', array('fetch' => PDO::FETCH_ASSOC))
    ->fields('w')
    ->condition('w.nid', $nid)
    ->execute()
    ->fetchAssoc();

  if ($db_settings){
    $db_settings['public_key'] = $db_settings['my_public_key'];
    $db_settings['private_key'] =  $db_settings['my_private_key']; // !!!!!!! @@@@@@@@ JON should get this from $_SESSION
  }
//print_r($db_settings);
  return $db_settings;
}


/**
 * Additional validation handler for validating webform scheduler settings.
 */
function webform_pki_encrypt_form_webform_configure_form_validate(&$form, &$form_state) {
  $values =& $form_state['values']['pk_encrypter'];
  
  if (!empty($values['public_key_start'])) {
    // Make a new DateObject (supplied by date_api) from the user input.
    $my_public_key = $values['public_key_start'] ;

    /*
    // If there are any mismatches between the user input and the expected
    // format, display an error to the user with a helpful link to the
    // date_popup module to make life so much easier.
    if (isset($my_public_key->errors['invalid'])) {
      form_set_error('public_key_start', $my_public_key->errors['invalid'] . ' ' . (!module_exists('date_popup') ? t('Install and enable the Date Popup module included in !date_link for an easy pop-up calprivate_keyar.', array('!date_link' => l('Date', 'http://drupal.org/project/date'))) : ''));
    }
    // Else, we can save the timestamp which is used by the submit handler.
    else {
      $values['public_key_start'] = $my_public_key->format('U');
    }
    */
  }

  if (!empty($values['private_key_end'])) {
    $my_private_key = $values['private_key_end'] ;
    /*
    if (isset($my_private_key->errors['invalid'])) {
      form_set_error('private_key_end', $my_private_key->errors['invalid'] . ' ' . (!module_exists('date_popup') ? t('Install and enable the Date Popup module included in !date_link for an easy pop-up calprivate_keyar.', array('!date_link' => l('Date', 'http://drupal.org/project/date'))) : ''));
    }
    else {
      $values['private_key_end'] = $my_private_key->format('U');
    }
    */
  }
  /*
  // If for some reason the user selected an private_key date that occurs before
  // the start date, they made a mistake.
  if (isset($values['public_key_start'])
    && isset($values['private_key_end'])
    && $values['private_key_end'] <= $values['public_key_start']) {
    form_set_error('private_key_end', t('The private_key time cannot be before the start time.'));
  }
  */
}



/**
 * Additional submit handler for saving webform scheduler settings.
 */
function webform_pki_encrypt_form_webform_configure_form_submit(&$form, &$form_state) {
  $values =& $form_state['values']['pk_encrypter'];
  $settings = _webform_pki_encrypt_webform_pki_encrypt_settings($form['nid']['#value']);

  if (empty($settings) ||
    (isset($values['public_key_start']) ? $values['public_key_start'] : 0) !== $settings['public_key'] ||
    (isset($values['private_key_end']) ? $values['private_key_end'] : 0) !== $settings['private_key'] ||
    //(int) $values['restriction_method'] !== (int) $settings['restriction_method'] ||
    $values['msg_before'] !== $settings['msg_before'] ||
    $values['msg_after'] !== $settings['msg_after']) {
    _mySite_session("current_private_key",$values['private_key_end']); //save PRivate key to SESSION
    $record = array(
      'nid' => $form['nid']['#value'],
      'my_public_key' => isset($values['public_key_start']) ? $values['public_key_start'] : 0,
      //'my_private_key' => isset($values['private_key_end']) ? $values['private_key_end'] : 0, DO NOT SAVE private key to DB      
      'msg_before' => trim($values['msg_before']) != '' ? trim($values['msg_before']) : NULL,
      'msg_after' => trim($values['msg_after']) != '' ? trim($values['msg_after']) : NULL,
    );

    // Insert or update the scheduler settings of this webform.
    drupal_write_record('webform_pki_encrypt', $record, empty($settings) ? array() : 'nid');
  }
}

/**
 * Implements hook_node_view().
 */
function webform_pki_encrypt_node_view($node, $view_mode) {
  if (!in_array($node->type, _webform_pki_encrypt_node_types())) {
    return;
  }

  $settings = _webform_pki_encrypt_webform_pki_encrypt_settings($node->nid);

  if (!isset($node->webform['pk_encrypter'])) {
    $node->webform['pk_encrypter'] = array();
  }

  $node->webform['pk_encrypter']['public_key'] = isset($settings['public_key']) ? (int) $settings['public_key'] : 0;
  $node->webform['pk_encrypter']['private_key'] = isset($settings['private_key']) ? (int) $settings['private_key'] : 0;
  //$node->webform['pk_encrypter']['restriction_method'] = isset($settings['restriction_method']) ? (int) $settings['restriction_method'] : 1;
  //$node->webform['pk_encrypter']['disabled'] = webform_pki_encrypt_webform_disabled($node);
  $node->webform['pk_encrypter']['msg_before'] = isset($settings['msg_before']) ? $settings['msg_before'] : '';
  $node->webform['pk_encrypter']['msg_after'] = isset($settings['msg_after']) ?  $settings['msg_after'] : '';
/*
  if ($node->webform['pk_encrypter']['disabled']) {
    switch ($node->webform['pk_encrypter']['restriction_method']) {
    case 0:
      drupal_access_denied();
      break;
    case 1:
      $node->webform['status'] = 0;
    case 2:
      // @see webform_pki_encrypt_form_webform_client_form_alter()

      if (($node->webform['pk_encrypter']['public_key'] > 0 && REQUEST_TIME < $node->webform['pk_encrypter']['public_key']) && $node->webform['pk_encrypter']['msg_before'] != '') {
        drupal_set_message(t($node->webform['pk_encrypter']['msg_before']), 'warning');
      } elseif (($node->webform['pk_encrypter']['private_key'] > 0 && REQUEST_TIME > $node->webform['pk_encrypter']['private_key']) && $node->webform['pk_encrypter']['msg_after'] != '') {
        drupal_set_message(t($node->webform['pk_encrypter']['msg_after']), 'warning');
      }
      break;
    }
  }
  */
}

/**
 * Get a list of Webform-enabled node types, with backwards compatibility.
 *
 * @see https://drupal.org/node/1609324#webform-types
 */
function _webform_pki_encrypt_node_types() {
  if (function_exists('webform_node_types')) {
    return webform_node_types();
  }
  return webform_variable_get('webform_node_types');
}



/**
 * Save private key in client session
 *
 */
function _mySite_session($key, $value = NULL)
{
    static $storage;
    if ($value)
    {
        $storage[$key] = $value ;
        $_SESSION['mykey'][$key] = $value ; // I use 'mykey' as a session key because in case some other module uses 'type' in $_SESSION. So try to make it unique.
    }
    elseif (empty($storage[$key]) && isset($_SESSION['mykey'][$key]))
    {
        $storage[$key] = $_SESSION['mykey'][$key];
    }
    return $storage[$key];
}


//+++++++++++++++++++ GENERATE NEW PAIR OF KEYS++++++++++++++++++++++++++++++++++++

// Generate a public and private key
/**
 * Generate new keys (we come here from the submit button)
 *
 */
function generate_new_keys(&$form, &$form_state){

  $arrKeys = _generate_new_keys();
drupal_set_message (t("<H3>IMPORTANT!!!! COPY/PASTE private and public key to the 'public/private' textareas below. If you Press <B>SAVE form options</B> button ALL previous .<H3>"));
//$strEncrypted = _test_encrypt('Hello World!', $arrKeys['public']);
drupal_set_message ("<pre>".$arrKeys['public']."</pre>");
//echo  "</b><BR>".get_my_public_Key()."<HR>";
drupal_set_message ( $strEncrypted);
//drupal_set_message ( "<HR>OK ENCRYPT<HR>");
$strDecrypted = _test_decrypt($strEncrypted, $arrKeys['private']);
drupal_set_message (t("<H3>IMPORTANT!!!! Copy/Store PRIVATE key somewhere safe . You will need this to decrypt all encrypted data.<b>If you loose it you loose your data</b><H3>"));

drupal_set_message( "<pre>".$arrKeys['private']."</pre");
//echo  "</b><BR>".get_my_private_Key()."<HR>";
//drupal_set_message ("<HR>Now DECRYPT<HR>");
//drupal_set_message ( $strDecrypted);



  //$form['pk_encrypter']['#parents'] = array('public_key_start');
  //form_set_value($form['public_key_start'],t('tjoohooo'), $form_state);
/*
    $form['pk_encrypter']['public_key_start']['#parents'] = array('public_key_start');
    form_set_value($form['pk_encrypter']['public_key_start'],t('foo'),$form_state);


    $settings['public_key']="cccccc";
    $form['pk_encrypter']['public_key_start'][0]['value']['#default_value'] ="ddd";
    $form_state['pk_encrypter']['public_key_start'][0]['value']['#default_value'] ="ddd";
    $form['public_key_start'][0]['value']['#default_value'] ="ddd";
    $form['pk_encrypter']['public_key_start']['value']['#default_value']='bbbb';
    $form['pk_encrypter']['public_key_start']['value']='bbbb';
    $form['pk_encrypter']['public_key_start']['#default_value']='bbbb2222';
    $form_state['pk_encrypter']['public_key_start']['value']['#default_value']='bbbb';
    $form_state['pk_encrypter']['public_key_start']['#default_value']='bbbb';
    $form_state['pk_encrypter']['public_key_start']['value']='bbbb';    
    $form_state['pk_encrypter']['public_key_start'] = array(
      '#default_value' => 'aaaaaaaa',
    );

    $form['pk_encrypter']['private_key_end'] = array(
      '#default_value' => 'aaaaaaaa',
    );
*/


  drupal_set_message(t("generate_new_keys OK (you must inclue all text ever ----- (dashes)"));

}



// Generate a public and private key
/**
 * Generate PRIVATE/PUBLIC key
 *
 */
function _generate_new_keys()
{
  //shell_exec('export RANDFILE="/opt/lampp/htdocs/.rnd";openssl ecparam -genkey -name secp256k1');
  shell_exec('export RANDFILE="/opt/lampp/htdocs/.rnd"');
    // Set the key parameters
    $config = array(
        "digest_alg" => "sha128",
        "private_key_bits" => 1024,
        "private_key_type" => OPENSSL_KEYTYPE_RSA,
    );

    // Create the private and public key
    $res = openssl_pkey_new($config);
    // Extract the private key from $res to $privKey
    openssl_pkey_export($res, $privKey);

    // Extract the public key from $res to $pubKey
    $pubKey = openssl_pkey_get_details($res);

    return array(
        'private' => $privKey,
        'public' => $pubKey["key"],
        'type' => $config,
    );
}

//TEST Function
function _test_encrypt($data, $publicKey)
{
    // Encrypt the data using the public key
   //openssl_public_encrypt($data, $encryptedData, get_my_public_Key());
   openssl_public_encrypt($data, $encryptedData, $publicKey); //ORIG
//echo  "<HR>publicKey= $publicKey";
    // Return encrypted data
    return $encryptedData;
}

//TEST Function // Decrypt data using the private key
function _test_decrypt($data, $privateKey)
{
    // Decrypt the data using the private key
   //openssl_private_decrypt($data, $decryptedData, get_my_private_Key()); //ORIG
   openssl_private_decrypt($data, $decryptedData, $privateKey); //ORIG
   //echo  "<HR>privateKey = $privateKey";

    // Return decrypted data
    return $decryptedData;
}


//--------------------- GENERATE NEW PAIR OF KEYS----------------------------

/**
callback access function
Checks if current user has access to the results on this node & access to
*/
function _webform_pki_encrypt_my_access_call_back($node) {
    watchdog("_webform_pki_encrypt_my_access_call_back", "_webform_pki_encrypt_my_access_call_back  ", $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
    if (_mySite_session("temp_decryptor")=="yes") return true;

    
  /*
  // /php_value memory_limit 128M
  if (is_null($node)) return false;
  
  global $user;
  $account = isset($account) ? $account : $user;
  $access = false;
  if (isset($node->field_webform_results_access)) {
    // This webform has user(s) specified for submission results access control.
    if (user_access("administer nodes") || user_access("edit any webform content")) {
      $access = true;
    }
    else {
      // For each user specified, make sure the current user is one of them,
      // otherwise don't show the results.
     if (isset($node->field_webform_results_access['und'])){
      foreach ($node->field_webform_results_access['und'] as $i => $ref) {
  // User Reference
        if (isset($ref['uid']) && (($ref['uid'] == $account->uid))) {
          $access = true;
          break;
        }
  // Entity Reference
        if (isset($ref['target_id']) && (($ref['target_id'] == $account->uid))) {
          $access = true;
          break;
        }
      }} //end of if (isset($node->field_webform_results_access['und']))
    }
  }
  return $access;  
  */
  
  //if (user_access('view encrypted values')) return true;
  $nodeurl_relative ='node/'. $node->nid;
  $valid_path=drupal_valid_path($nodeurl_relative.'/webform-results') ;
  watchdog("_webform_pki_encrypt_my_access_call_back AFTER", "_webform_pki_encrypt_my_access_call_back nodeurl_relative=$nodeurl_relative ", $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);
  drupal_set_message("_webform_pki_encrypt_my_access_call_back  = $nodeurl_relative  + VALID path=".$valid_path);
  //return false;
  if($valid_path) {_mySite_session("temp_decryptor","yes"); } else { _mySite_session("temp_decryptor","no") ;} //save PRivate key to SESSION
  return $valid_path ; // at this point we choose to ignore it. Reminder email is tied with webforms_results view
  
}


// +++++++++++++++++++++++++++++++ moved modified participants form ++++++++++

/**
 * Implements hook_menu().
 */
function webform_pki_encrypt_menu() {
  $items = array();
    $items['node/%webform_menu/pki_encrypt/private_key_form'] = array(
    'title' => 'PKI-Client-Key',
    'page callback' => 'webform_pki_encrypt_generate_page',
    'page arguments' => array(1),
    //'access callback' => 'node_access',
    //'access arguments' => array('update', 1),
    'access callback' =>'webform_pki_encrypt_my_access_callback',
    'weight' => 12,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


function webform_pki_encrypt_generate_page($node) {
  $out = drupal_get_form('webform_pki_encrypt_generate_form', $node);
  return $out;
}

function webform_pki_encrypt_generate_form($form, &$form_state, $node) {
  $nid = $node->nid;
  $form['intro'] = array(
    '#markup' => '<h2>' . t('Enter your private key to view results of %node_title', array("%node_title" => $node->title)) . '</h2><p>' . t('paste ALL text WITH dashes in the textarea below: ---...---.') . '</p>',
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,  
  );
  // added by J 160927++++++++++++++
  $form['private_key_given'] = array(
    '#type' => 'textarea',
    '#title' => t('paste the PRIVATE KEY that was given to you '),
    '#required' => false,
  );  
  // added by J 160927------------

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit your private key'),
  );


  return $form;
}


function webform_pki_encrypt_generate_form_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $private_key=$form_state['values']['private_key_given'];
  drupal_set_message("INSIDE extra decryptors  decrypt key = $private_key");
  // Check existance of PKI encrypt module
  _mySite_session("current_private_key",$private_key); //save PRivate key to SESSION
  $session_private_key=_mySite_session("current_private_key");
  drupal_set_message("INSIDE extra decryptors  SESSION decrypt key = $session_private_key");

  drupal_goto('node/' . $nid . '/pki_encrypt/private_key_form');
}







/**
callback access function MIGHT NOT BE USED
Checks if current user has access to the results on this node & access to
*/
function webform_pki_encrypt_my_access_callback() {
  //get node
  $nid = 0;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nid = arg(1);
  }
  $node = node_load($nid);
  //$nodeurl = url('node/'. $node->nid);
  $nodeurl_relative ='node/'. $node->nid;
  return drupal_valid_path($nodeurl_relative.'/webform-results') ; // at this point we choose to ignore it. Reminder email is tied with webforms_results view
}

// ------------------------------ moved modified participants form ------------------------------